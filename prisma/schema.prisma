// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  clerkId               String         @unique
  email                 String
  image                 String?
  username              String         @unique
  name                  String
  posts                 Post[]
  followers             Follow[]       @relation("following")
  following             Follow[]       @relation("followers")
  notificationsCreated  Notification[] @relation("notificationsCreated")
  notificationsReceived Notification[] @relation("notificationRecieved")
  isVerified            Boolean        @default(false)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  website               String?
  location              String?
  bio                   String?
  Like                  Like[]
}

model Post {
  id            String         @id @default(cuid())
  likes         Like[]
  comments      Comment[]
  text          String
  image         String
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  author        User?          @relation(fields: [authorId], references: [id])
  notifications Notification[]

  @@index([id, authorId])
}

model Like {
  id            String         @id @default(cuid())
  postId        String
  likerId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  likePost      Post           @relation(fields: [postId], references: [id])
  liker         User           @relation(fields: [likerId], references: [id])
  notifications Notification[]

  @@index([postId, likerId])
}

model Comment {
  id            String         @id @default(cuid())
  postId        String
  commentorId   String
  text          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  commentPost   Post           @relation(fields: [commentorId], references: [id])
  notifications Notification[]

  @@unique([postId, commentorId])
  @@index([postId, commentorId])
}

model Notification {
  id                     String           @id @default(cuid())
  notificationType       NotificationType
  notificationCreatorId  String
  notificationReceiverId String
  notificationCreated    User?            @relation("notificationsCreated", fields: [notificationCreatorId], references: [id])
  notificationReceived   User?            @relation("notificationRecieved", fields: [notificationReceiverId], references: [id])
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  isRead                 Boolean          @default(false)

  Post              Post?    @relation(fields: [postId], references: [id])
  postId            String?
  Like              Like?    @relation(fields: [likeId], references: [id])
  likeId            String?
  Follow            Follow?  @relation(fields: [followFollowerId, followFollowingId], references: [followerId, followingId])
  followFollowerId  String?
  followFollowingId String?
  Comment           Comment? @relation(fields: [commentId], references: [id])
  commentId         String?

  @@index([notificationReceiverId, createdAt])
}

model Follow {
  followerId    String
  followingId   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  following     User?          @relation("following", fields: [followingId], references: [id])
  followers     User?          @relation("followers", fields: [followerId], references: [id])
  notifications Notification[]

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
